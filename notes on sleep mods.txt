


Light sleep disables the CPU (Central Processing Unit) and most of its peripherals, but it keeps some components like the RTC (Real-Time Clock), ULP (Ultra-Low-Power) co-processor, and some peripherals like the UART (Universal Asynchronous Receiver-Transmitter) active.
 RTC can be used to wake up the device after a specified time or when a specific event occurs, such as a button press or sensor reading
Light sleep mode is less power-efficient compared to deep sleep mode but allows for a faster wake-up time, making it suitable for applications where rapid response to events is necessary.

DEEP SLEEP: 
It effectively shuts down the entire chip, except for the RTC, which keeps running with very low power consumption. CPU, RAM, and most peripherals are powered off, resulting in minimal power consumption.
The only parts of the chip that remain powered on are:
RTC controller
ULP coprocessor
RTC fast memory
RTC slow memory
To wake up from deep sleep, you typically rely on a timer or external hardware signals. You configure the RTC to wake up the microcontroller at a specific time or in response to an external interrupt (e.g., a button press or a sensor reading).
Because deep sleep consumes very little power, it is suitable for battery-powered devices that need to conserve energy for extended periods.
RTC IO module contains the logic to trigger wakeup when one of RTC GPIOs is set to a predefined logic level. RTC IO is part of the RTC peripherals power domain, so RTC peripherals will be kept powered on during Deep-sleep if this wakeup source is requested.
The RTC IO module is enabled in this mode, so internal pullup or pulldown resistors can also be used. They need to be configured by the application using rtc_gpio_pullup_en() and rtc_gpio_pulldown_en() functions before calling esp_deep_sleep_start().
In revisions 0 and 1 of ESP32, this wakeup source is incompatible with ULP and touch wakeup sources.
The RTC controller contains the logic to trigger wakeup using multiple RTC GPIOs. One of the following two logic functions can be used to trigger wakeup:
wake up if any of the selected pins is high (ESP_EXT1_WAKEUP_ANY_HIGH)
wake up if all the selected pins are low (ESP_EXT1_WAKEUP_ALL_LOW)
NOTE;  when we wake up from deep sleep, the application's state is lost, so the board need to initialize everything again. i suggest light sleep when we need to have some state maintained. 

-------------setting in esp-idf: 
Common clock sources for the RTC co-processor in ESP32 may include:

Crystal Oscillator (XTAL): This is a high-accuracy clock source that is suitable for applications requiring precise timekeeping.
Internal RC Oscillator (RTC_SLOW_CLK): This is an internal, lower-accuracy clock source that consumes less power but may be less accurate over long periods.
After configuring the RTC clock source, we should use the appropriate ESP-IDF functions to initialize and work with the RTC co-processor as needed. the RTC co-processor can be used for tasks like low-power timing and wake-up functionality during light sleep mode. 

 
We would expect to go far lower in power consumption in a production application where we could shut down the voltage regulator, UART controller, etc.

		             	No Deep Sleep	 Deep Sleep
Standard Current	40mA		        6.4mA
Pulse Current	  	100mA		       100mA
Pulse Duration	  	500ms      		500ms
Duty Cycle		     0.0056%	     0.0056%
Watt Hours Per Day	3.6Wh		     0.57Wh



















